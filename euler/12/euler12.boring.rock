(The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:)
(    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...)
(Let us list the factors of the first seven triangle numbers:)
(   1: 1)
(   3: 1,3)
(   6: 1,2,3,6)
(  10: 1,2,5,10)
(  15: 1,3,5,15)
(  21: 1,3,7,21)
(  28: 1,2,4,7,14,28)
(We can see that 28 is the first triangle number to have over five divisors.)
(What is the value of the first triangle number to have over five hundred divisors?)

Modulo takes divisor and dividend                 ( func Modulo{divisor, dividend}                  )
  Let quotient be divisor over dividend           (   quotient = divisor / dividend                 )
  Turn down quotient                              (   quotient = floor{quotient}                    )
  Give back divisor minus quotient times dividend (   return divisor - quotient * dividend          ) 

NumFactors takes num                              ( func NumFactors{num}                            )
  Let factors be 0                                (   factors = 0                                   )
  Let index be 1                                  (   index = 1                                     )
  While index of index is less than num           (   while index * index < num                     )
    If Modulo taking num, index is 0              (     if Modulo{num, index} == 0                  )
      build factors up                            (       factors ++                                )
 
    build index up                                (     index ++                                    )
  
  Let factors be of 2                             (   factors *= 2                                  )
  If index of index is num                        (   if index * index == num                       )
    build factors up                              (     factors ++                                  )
  
  give back factors                               (   return factors                                )

                                                  ( // taking a naive approach. Just count upwards. )
                                                  ( // Takes about 5 minutes to run on Rockstar's   )
                                                  ( // Satriani. Would be faster on other platforms )
Let target be 500                                 ( target = 500                                    )
Let count be 0                                    ( count = 0                                       )
Let triangle be 1                                 ( triangle = 1                                    )
Let accum be 0                                    ( accum = 0                                       )
Until count is as big as target                   ( while count < target                            )
  Let accum be with triangle                      (   accum += triangle                             )
  Build triangle up                               (   triangle ++                                   )
  Let count be NumFactors taking accum            (   count = NumFactors{accum}                     )
  
Say accum                                         ( print{accum}                                    )