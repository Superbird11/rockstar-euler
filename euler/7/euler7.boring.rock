(By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.)
(What is the 10 001st prime number?)

Modulo takes divisor and dividend                                 ( func Modulo{divisor, dividend}                  )
  Let quotient be divisor over dividend                           (   quotient = divisor / dividend                 )
  Turn down quotient                                              (   quotient = floor{quotient}                    )
  Give back divisor minus quotient times dividend                 (   return divisor - quotient * dividend          ) 

Let primes at 1 be 2                                              ( primes[1] = 2    // 1-indexed array lol         )
Let primes at 2 be 3                                              ( primes[2] = 3                                   )

IsPrime takes num                                                 ( func isPrime{num}                               )
  ipIdx is 1                                                      (   ipIdx = 1                                     )
  Let ipPrime be primes at ipIdx                                  (   ipPrime = primes[idx]                         )
  Until ipIdx is primes or ipPrime of ipPrime is greater than num (   while ipIdx == len{primes} or ipPrime^2 > num )
    If 0 is Modulo taking num, ipPrime                            (     if 0 == Modulo{num, ipPrime}                )
      give back false                                             (       return false                              )

    build ipIdx up                                                (     ipIdx++                                     )
    Let ipPrime be primes at ipIdx                                (     ipPrime = primes[idx]                       )

  give back true                                                  (   return true                                   )

GeneratePrimes takes upToIdx                                      ( func GeneratePrimes{upToIdx}                    )
  gpIdx is 3                                                      (   gpIdx = 3                                     )
  gpPrime is 3                                                    (   gpPrime = 3                                   )
  While gpIdx is as low as upToIdx                                (   while gpIdx <= upToIdx                        )
    Let gpPrime be with 2                                         (     gpPrime += 2                                )
    If IsPrime taking gpPrime                                     (     if IsPrime{gpPrime}                         )
      Let primes at gpIdx be gpPrime                              (       primes[gpIdx] = gpPrime                   )
      build gpIdx up                                              (       gpIdx++                                   )
 

  give back gpPrime                                               (   return gpPrime                                )

limit is 10001                                                    (  limit = 10001                                  )
say GeneratePrimes taking limit                                   (  print{GeneratePrimes{limit}}                   )
  