(By starting at the top of the triangle below and moving to adjacent numbers on the row below, )
(the maximum total from top to bottom is 23.                                                   )
(    3                                                                                         )
(   7 4                                                                                        )
(  2 4 6                                                                                       )
( 8 5 9 3                                                                                      )
(That is, 3 + 7 + 4 + 9 = 23.                                                                  )
(Find the maximum total from top to bottom of the triangle below:                              )
(                                                                                              )
(              75                                                                              )
(             95 64                                                                            )
(            17 47 82                                                                          )
(           18 35 87 10                                                                        )
(          20 04 82 47 65                                                                      )
(         19 01 23 75 03 34                                                                    )
(        88 02 77 73 07 63 67                                                                  )
(       99 65 04 28 06 16 70 92                                                                )
(      41 41 26 56 83 40 80 70 33                                                              )
(     41 48 72 33 47 32 37 16 94 29                                                            )
(    53 71 44 65 25 43 91 52 97 51 14                                                          )
(   70 11 33 28 77 73 17 78 39 68 17 57                                                        )
(  91 71 52 38 17 14 91 43 58 50 27 29 48                                                      )
( 63 66 04 68 89 53 67 30 73 16 69 87 40 31                                                    )
(04 62 98 27 23 09 70 98 73 93 38 53 60 04 23                                                  )
(                                                                                              )
(NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every    )
(route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows;)
(it cannot be solved by brute force, and requires a clever method!                             )

rawtriangle says 75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
Cut rawtriangle into triangle with " "                     ( triangle = rawtriangle.split{}                )
Let triangletotal be triangle                              ( triangletotal = len{triangle}                 )

Let numrows be nothing                                     ( numrows = 0                                   )
Let currentrow be nothing                                  ( currentrow = 0                                )
Let currentcol be nothing                                  ( currentcol = 0                                )
Until currentrow is greater than triangletotal             ( while currentrow <= triangletotal             )
  Let currentrow be with numrows plus 1                    (   currentrow += numrows + 1                   )
  build numrows up                                         (   numrows ++                                  )

Knock numrows down                                         ( numrows --                                    )
Knock numrows down                                         ( numrows --                                    )
Let currentrow be numrows                                  ( currentrow = numrows                          )

TriangleAt takes trirow, tricol                            ( func TriangleAt{trirow, tricol}               )
  Let rowstart be trirow times trirow plus trirow          (   rowstart = trirow * trirow + trirow         )
  Let rowstart be over 2                                   (   rowstart /= 2                               )
  Give back rowstart plus tricol                           (   return rowstart + tricol                    )

Let sumbelow at -1 be 0                                    ( sumbelow = []                                 )
Until currentrow is less than nothing                      ( while currentRow >= 0                         )
  currentcol is -1                                         (   currentCol = -1                             )
  Until currentcol is as big as currentrow                 (   while currentcol < currentrow               )
    Build currentcol up                                    (     currentCol ++                             )
    Let idx be TriangleAt taking currentrow, currentcol    (     idx = TriangleAt{currentrow, currentcol}  )
    Let trival be triangle at idx                          (     trival = triangle[idx]                    )
    cast trival                                            (     triangle = int{trival}                    )
    If currentrow is as big as numrows                     (     if currentrow >= numrows                  )
      Let sumbelow at idx be trival                        (       sumbelow[idx] = trival                  )
      Take it to the top                                   (       continue                                )
      
    Let nextrow be currentrow plus 1                       (     nextrow = currentrow + 1                  )
    Let nextcol be currentcol plus 1                       (     nextcol = currentcol + 1                  )
    Let leftIdx be TriangleAt taking nextrow, currentcol   (     leftIdx = TriangleAt{nextrow, currenctol} )
    Let rightIdx be TriangleAt taking nextrow, nextcol     (     rightIdx = TriangleAt{nextrow, nextcol}   )
    Let leftChild be sumbelow at leftIdx                   (     leftChild = sumbelow[leftIdx]             )
    Let rightChild be sumbelow at rightIdx                 (     rightChild = sumbelow[rightIdx]           )
    If leftChild is bigger than rightChild                 (     if leftChild > rightChild                 )
      Let sumbelow at idx be trival plus leftChild         (       sumbelow[idx] = trival + leftChild      )
      take it to the top                                   (       continue                                )
    
    Let sumbelow at idx be trival plus rightChild          (     sumbelow[idx] = trival + rightChild       )
    take it to the top                                     (     continue                                  )

  Knock currentrow down                                    (   currentrow --                               )
  
Shout sumbelow at 0                                        ( print{sumbelow[0]}                            )
