(2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.)
(What is the sum of the digits of the number 2^1000?)

(In principle this is simple - python can do it easily because it doesn't have)
(a restricton on int size. But Rockstar really runs hard into the precision)
(limit on this one. We have to implement a big fixed-point number, somehow.)

Let ten be 10                                 ( ten = 10                          )
ModTen takes divisor                          ( func ModTen{divisor}              )
  Let quotient be divisor over ten            (   quotient = divisor / ten        )
  Turn down quotient                          (   quotient = floor{quotient}      )
  Give back divisor minus quotient times ten  (   return divisor - quotient * 10  )

Let digits at 0 be 1                          ( digits = [1]                      )
Let factor be 2                               ( factor = 2                        )
Let limit be 1000                             ( limit = 1000                      )
Let count be 0                                ( count = 0                         )
While count is less than limit                ( while count < limit               )
  Let carry be 0                              (   carry = 0                       )
  Let len be digits                           (   len = len{digits}               )
  Let index be 0                              (   index = 0                       )
  Until false                                 (   while true                      )
    Let digit be digits at index              (     digit = digits[index]         )
    If index is as big as len                 (     if index >= len               )
      Let digits at index be carry            (       digits[index] = carry       )
      Break it down                           (       break                       )
      
    Let digit be of factor                    (     digit *= factor               )
    Let digit be with carry                   (     digit += carry                )
    Let carry be digit over ten               (     carry = digit / ten           )
    Turn down carry                           (     carry = floor{carry}          )
    Let digit be ModTen taking digit          (     digit = ModTen{digit}         )
    Let digits at index be digit              (     digits[index] = digit         )
    Build index up                            (     index ++                      )
    
  Build count up                              (   count ++                        )
  
Let fin be 0                                  ( fin = 0                           )
Let sum be 0                                  ( sum = 0                           )
Let size be digits                            ( size = len{digits}                )
While fin is less than size                   ( while fin < size                  )
  Let dig be digits at fin                    (   dig = digits[fin]               )
  Let sum be with dig                         (   sum += dig                      )
  Build fin up                                (   fin ++                          )
  
Say sum                                       ( print{sum}                        )
